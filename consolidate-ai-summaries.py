#!/usr/bin/env python3
"""
Consolidate all Markdown summaries in monthly/aisummary into monthly/index.html.

Output HTML includes an H1 title: "Model Meter Monthly summaries" and a TOC.
Markdown is rendered client-side via marked.js to avoid Python deps.
"""

from __future__ import annotations

import html
from pathlib import Path
from datetime import datetime

TITLE = "Model Meter Monthly summaries"


def read_markdown_files(aisummary_dir: Path) -> list[tuple[str, str]]:
	"""Return list of (id, markdown_text) sorted descending by id (YYYY-MM-DD)."""
	files = sorted(
		(p for p in aisummary_dir.glob("*.md") if p.is_file()),
		key=lambda p: p.stem,
		reverse=True,
	)
	result: list[tuple[str, str]] = []
	for p in files:
		try:
			text = p.read_text(encoding="utf-8")
		except UnicodeDecodeError:
			text = p.read_text(errors="replace")
		result.append((p.stem, text))
	return result


def build_html(sections: list[tuple[str, str]]) -> str:
	"""Build a single HTML document string with a TOC and client-side MD rendering."""
	# Escape content for safe embedding inside <script type="text/markdown">.
	section_html: list[str] = []
	toc_items: list[str] = []
	for sid, md in sections:
		# Build human-friendly date label from YYYY-MM-DD, safe on Windows (no %-d)
		try:
			dt = datetime.strptime(sid, "%Y-%m-%d")
			label = f"{dt.day} {dt.strftime('%B %Y')}"  # e.g., 15 March 2016
		except Exception:
			label = sid
		toc_items.append(
			f'<li><a href="#{html.escape(sid)}">{html.escape(label)}</a></li>'
		)
		# Use textContent via script tag to keep raw markdown; minimal escaping
		escaped_md = md.replace("</script>", "</scr" + "ipt>")
		section_html.append(
			f"""
			<article id="{html.escape(sid)}">
				<div class=\"markdown-body\">
					<script type=\"text/markdown\">{escaped_md}</script>
				</div>
			</article>
			"""
		)

	html_doc = f"""<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1" />
		<title>{html.escape(TITLE)}</title>
		<style>
			:root {{
				--bg: #0b0c10;
				--card: #111318;
				--text: #e9eef5;
				--muted: #a9b1ba;
				--link: #61dafb;
				--border: #22252e;
			}}
			html, body {{ background: var(--bg); color: var(--text); font-family: system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, Noto Sans, Helvetica, Arial, "Apple Color Emoji", "Segoe UI Emoji"; margin: 0; }}
			header {{ position: sticky; top: 0; background: linear-gradient(180deg, rgba(11,12,16,.95), rgba(11,12,16,.85)); backdrop-filter: saturate(180%) blur(6px); padding: 16px 20px; border-bottom: 1px solid var(--border); z-index: 10; }}
			h1 {{ margin: 0; font-weight: 650; font-size: 1.6rem; letter-spacing: .2px; }}
			main {{ display: grid; grid-template-columns: 280px 1fr; gap: 20px; padding: 20px; }}
			nav {{ position: sticky; top: 72px; align-self: start; max-height: calc(100dvh - 92px); overflow: auto; padding-right: 6px; }}
			.toc {{ list-style: none; padding: 0; margin: 0; }}
			.toc li {{ margin: 6px 0; }}
			.toc a {{ color: var(--link); text-decoration: none; }}
			.toc a:hover {{ text-decoration: underline; }}
			article {{ background: var(--card); border: 1px solid var(--border); border-radius: 10px; padding: 18px 18px; margin-bottom: 16px; }}
			article h2 {{ margin-top: 0; }}
			/* basic markdown styles */
			.markdown-body h1, .markdown-body h2, .markdown-body h3 {{ border-bottom: 1px solid var(--border); padding-bottom: 4px; }}
			.markdown-body pre {{ background: #0c0f14; border: 1px solid var(--border); padding: 12px; border-radius: 8px; overflow: auto; }}
			.markdown-body code {{ background: #0c0f14; border: 1px solid var(--border); padding: 2px 4px; border-radius: 6px; }}
			.markdown-body table {{ border-collapse: collapse; width: 100%; }}
			.markdown-body th, .markdown-body td {{ border: 1px solid var(--border); padding: 6px 8px; }}
			footer {{ color: var(--muted); text-align: center; padding: 24px; border-top: 1px solid var(--border); }}
			@media (max-width: 880px) {{ main {{ grid-template-columns: 1fr; }} nav {{ position: static; max-height: none; }} }}
		</style>
		<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
	</head>
	<body>
		<header>
			<h1>{html.escape(TITLE)}</h1>
		</header>
		<main>
			<nav>
				<ul class="toc">
					{''.join(toc_items)}
				</ul>
			</nav>
			<section>
				{''.join(section_html)}
			</section>
		</main>
		<footer>
			Generated by consolidate-ai-summaries.py
		</footer>
		<script>
			// Render markdown into each article section using marked.js
			document.querySelectorAll('div.markdown-body > script[type="text/markdown"]').forEach((script) => {{
				const container = script.parentElement;
				const raw = script.textContent || '';
				const html = marked.parse(raw, {{ breaks: true, mangle: false, headerIds: true }});
				container.innerHTML = html;
			}});
		</script>
	</body>
</html>
"""
	return html_doc


def main() -> int:
	repo_root = Path(__file__).resolve().parent
	monthly_dir = repo_root / "monthly"
	aisummary_dir = monthly_dir / "aisummary"
	if not aisummary_dir.exists():
		raise SystemExit(f"Directory not found: {aisummary_dir}")

	sections = read_markdown_files(aisummary_dir)
	if not sections:
		raise SystemExit("No markdown files found in monthly/aisummary")

	html_text = build_html(sections)
	out_file = monthly_dir / "index.html"
	out_file.write_text(html_text, encoding="utf-8")
	print(f"Wrote {out_file} with {len(sections)} sections.")
	return 0


if __name__ == "__main__":
	raise SystemExit(main())

