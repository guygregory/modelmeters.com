<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="utf-8" />
	<meta name="viewport" content="width=device-width, initial-scale=1" />
	<title>Model Meter Monthly summaries - ‚ú® AI generated (Dynamic)</title>
	<style>
		/* Light theme (default) */
		:root {
			--bg:#f5f7fa; --bg-alt:#e9eef2; --panel:#ffffff; --panel-2:#f0f3f7; --text:#1b242b; --muted:#5d6b76; --accent:#2563eb; --border:#d0d7de; --ring:#3b82f680; --shadow:0 6px 18px rgba(0,0,0,.08);
			--topbar-offset: 0px; /* header not sticky on monthly page */
		}
		/* Dark theme */
		:root[data-theme="dark"] {
			--bg:#0b0c10; --bg-alt:#0e1116; --panel:#14161a; --panel-2:#1b1f24; --text:#e8eef3; --muted:#a8b3bd; --accent:#3da9fc; --border:#2a2f36; --ring:#7cc4ff80; --shadow:0 10px 24px rgba(0,0,0,.35);
		}
		html, body { min-height: 100%; }
		html { scroll-padding-top: calc(var(--topbar-offset) + 16px); -webkit-text-size-adjust: 100%; text-size-adjust: 100%; }
		body { margin:0; font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Inter, Arial; background: linear-gradient(180deg,var(--bg) 0%, var(--bg-alt) 100%); color: var(--text); }
		.container { min-height:100dvh; padding:12px 12px 16px; box-sizing:border-box; }
		.card { background: var(--panel); border:1px solid var(--border); border-radius:16px; box-shadow: var(--shadow); overflow:hidden; position:relative; clip-path: inset(0 round 16px); }
		.card-hd { position:relative; background:var(--panel); display:flex; gap:12px; align-items:center; justify-content:space-between; padding:14px 16px; border-bottom:1px solid var(--border); flex-wrap:wrap; }
		.title { font-size:18px; font-weight:650; letter-spacing:.2px; }
		.toolbar { display:flex; gap:8px; flex-wrap:wrap; align-items:center; }
		button { background:var(--panel-2); color:var(--text); border:1px solid var(--border); border-radius:10px; padding:8px 10px; font-size:14px; line-height:1; outline:none; cursor:pointer; }
		button:hover { border-color:#374151; }
		button:focus { box-shadow:0 0 0 4px var(--ring); border-color:var(--accent); }

		.content { display:grid; grid-template-columns: 1fr; gap:16px; padding:16px; }
		.articles { min-width:0; }
		.article { background: var(--panel); border:1px solid var(--border); border-radius:12px; padding:0; margin-bottom:12px; box-shadow: var(--shadow); scroll-margin-top: calc(var(--topbar-offset) + 16px); }
		.article:target::before { content: ""; display:block; height: calc(var(--topbar-offset) + 16px); margin-top: calc(-1 * (var(--topbar-offset) + 16px)); }
		.month-title { cursor:pointer; display:flex; align-items:center; gap:8px; padding:14px 16px; border-bottom:1px solid var(--border); user-select:none; }
		.month-title h2 { margin:0; font-size:22px; line-height:1.2; font-weight:700; }
		.month-title .chev { transition: transform .2s; }
		/* When collapsed, rotate the right-pointing chevron to point down */
		.article.collapsed .month-title .chev { transform: rotate(90deg); }
		.month-details { padding:16px; }

		/* Minimal markdown styles */
		.markdown-body h1, .markdown-body h2, .markdown-body h3 { border-bottom:1px solid var(--border); padding-bottom:4px; }
		.markdown-body pre { background: var(--panel-2); border:1px solid var(--border); padding:12px; border-radius:10px; overflow:auto; }
		.markdown-body code { background: var(--panel-2); border:1px solid var(--border); padding:2px 6px; border-radius:8px; }
		.markdown-body table { border-collapse: collapse; width: 100%; }
		.markdown-body th, .markdown-body td { border: 1px solid var(--border); padding: 6px 8px; }
		.article.collapsed .month-details { display:none; }

		.footer { color: var(--muted); text-align:center; padding: 12px 16px; border-top:1px solid var(--border); }
		@media (max-width: 900px) { .content { grid-template-columns: 1fr; } }
	</style>
	<script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
	<base target="_self">
	<meta name="color-scheme" content="light dark">
	<meta name="theme-color" content="#2563eb">
	<link rel="icon" href="data:,">
</head>
<body>
	<div class="container">
		<div class="card">
			<div class="card-hd">
				<div class="title">Foundry Models monthly summary AI agent ‚ú®</div>
				<div class="toolbar">
					<button id="btn-theme" title="Toggle light/dark mode">üåó Theme</button>
					<button id="btn-back" title="Back to Model Meters">‚Ü©Ô∏èModel Meters</button>
				</div>
			</div>
			<div class="content">
				<section class="articles" id="articles">
					<div id="status" class="footer" style="border:none;">Loading monthly summaries‚Ä¶</div>
				</section>
			</div>
			<div class="footer">Built from Markdown files in <code>monthly/aisummary/</code> at runtime.</div>
		</div>
	</div>

	<script>
		// Theme setup (match main page behavior + label/emoji toggle)
		(function initTheme(){
			const root = document.documentElement;
			const btn = document.getElementById('btn-theme');
			const qp = new URLSearchParams(location.search);
			const paramTheme = qp.get('theme'); // 'dark' or 'light' if passed from main page
			const stored = localStorage.getItem('priceExplorerTheme');
			const prefersDark = window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;
			let mode = (paramTheme || stored || (prefersDark ? 'dark' : 'light')) === 'dark' ? 'dark' : 'light';

			if (paramTheme) localStorage.setItem('priceExplorerTheme', mode);

			function currentMode(){
				return root.getAttribute('data-theme') === 'dark' ? 'dark' : 'light';
			}

			function applyMode(newMode){
				const m = newMode === 'dark' ? 'dark' : 'light';
				if (m === 'dark') root.setAttribute('data-theme','dark');
				else root.removeAttribute('data-theme');
				localStorage.setItem('priceExplorerTheme', m);
				updateBtn();
			}

			function updateBtn(){
				const m = currentMode();
				// Show target mode on the button (same UX as main page)
				const nextLabel = m === 'dark' ? '‚òÄÔ∏è Light' : 'üåô Dark';
				btn.textContent = nextLabel;
				btn.setAttribute('aria-label', 'Switch to ' + (m === 'dark' ? 'light' : 'dark') + ' theme');
			}

			applyMode(mode);
			btn.addEventListener('click', () => {
				const isDark = currentMode() === 'dark';
				applyMode(isDark ? 'light' : 'dark');
			});
		})();

		// Back button
		document.getElementById('btn-back').addEventListener('click', () => {
			window.location.href = '../index.html';
		});

		function getEnsuredBase() {
			const { origin, pathname } = window.location;
			const pathBase = pathname.endsWith('/') ? pathname : pathname + '/';
			return origin + pathBase; // always ends with '/'
		}

		async function listMarkdownFiles(dirUrl) {
			// Strategy:
			// 1) Try directory listing (works locally with Python http.server)
			// 2) Try JSON manifest at aisummary/index.json (array of filenames or {files:[]})
			// 3) Fallback: parse monthly/index.html to get article ids -> map to YYYY-MM-DD.md
			// Return newest-first.
			// Important: when the page is loaded as /monthly (no trailing slash),
			// relative fetches like 'aisummary/' would incorrectly resolve to /aisummary/.
			// Build absolute URLs against a base that guarantees a trailing slash.
			const ensuredBase = getEnsuredBase();
			const dirAbs = new URL(dirUrl, ensuredBase).toString();
			// 1) Directory listing
			try {
				const res = await fetch(dirAbs);
				if (res.ok) {
					const html = await res.text();
					const doc = new DOMParser().parseFromString(html, 'text/html');
					const hrefs = Array.from(doc.querySelectorAll('a'))
						.map(a => a.getAttribute('href'))
						.filter(h => h && h.toLowerCase().endsWith('.md'));
					const files = Array.from(new Set(hrefs.map(h => h.split('#')[0].split('?')[0])));
					if (files.length) {
						files.sort((a, b) => b.localeCompare(a));
						return files;
					}
				}
			} catch (_) { /* ignore and try next */ }

			// 2) Manifest
			try {
				const res = await fetch(new URL('index.json', dirAbs));
				if (res.ok) {
					const data = await res.json();
					let files = Array.isArray(data) ? data : (Array.isArray(data.files) ? data.files : []);
					files = files.filter(f => typeof f === 'string' && f.toLowerCase().endsWith('.md'));
					if (files.length) {
						files.sort((a, b) => b.localeCompare(a));
						return files;
					}
				}
			} catch (_) { /* ignore and try next */ }

			// 3) Parse the static monthly page to infer ids
			try {
				const res = await fetch(new URL('index.html', ensuredBase));
				if (res.ok) {
					const html = await res.text();
					const doc = new DOMParser().parseFromString(html, 'text/html');
					const ids = Array.from(doc.querySelectorAll('article[id]'))
						.map(a => a.id)
						.filter(Boolean);
					let files = ids.map(id => `${id}.md`);
					files = Array.from(new Set(files));
					files.sort((a, b) => b.localeCompare(a));
					return files;
				}
			} catch (_) { /* ignore */ }

			return [];
		}

		function filenameBase(path) {
			const name = path.split('/').pop();
			return name.endsWith('.md') ? name.slice(0, -3) : name;
		}

		function createArticle({ id, title, html, collapsed }) {
			const article = document.createElement('article');
			article.className = 'article' + (collapsed ? ' collapsed' : '');
			article.id = id;

			const header = document.createElement('div');
			header.className = 'month-title';
			header.innerHTML = `<span class="chev">‚ñ∂</span><h2 class="month-heading">${title}</h2>`;
			header.addEventListener('click', () => {
				article.classList.toggle('collapsed');
				history.replaceState(null, '', '#' + id); // keep URL in sync
			});

			const details = document.createElement('div');
			details.className = 'month-details';
			const mdContainer = document.createElement('div');
			mdContainer.className = 'markdown-body';
			mdContainer.innerHTML = html;
			details.appendChild(mdContainer);

			article.appendChild(header);
			article.appendChild(details);
			return article;
		}

		async function loadSummaries() {
			const status = document.getElementById('status');
			const container = document.getElementById('articles');
			try {
				const dir = 'aisummary/';
				const files = await listMarkdownFiles(dir);
				if (!files.length) {
					status.textContent = 'No Markdown files found in aisummary/';
					return;
				}

				// Fetch all markdown files in parallel, skipping any missing ones
				const results = await Promise.allSettled(files.map(async (file) => {
					const ensuredBase = getEnsuredBase();
					const dirAbs = new URL(dir, ensuredBase);
					const url = new URL(file, dirAbs);
					const res = await fetch(url);
					if (!res.ok) throw new Error('Failed to fetch ' + url);
					const text = await res.text();
					// Extract the first H1 for the clickable title
					let title = filenameBase(file);
					const h1Match = text.match(/^#\s*(.+)$/m);
					if (h1Match) title = h1Match[1];
					// Remove the first H1 (and a following blank line, if present) from content to avoid duplicates
					const lines = text.split(/\r?\n/);
					const idx = lines.findIndex(l => /^#\s/.test(l));
					if (idx !== -1) {
						lines.splice(idx, 1);
						if (lines[idx] === '') lines.splice(idx, 1);
					}
					const stripped = lines.join('\n');
					const html = marked.parse(stripped);
					return { file, title, html };
				}));

				const fetched = results.filter(r => r.status === 'fulfilled').map(r => r.value);

				// Clear status and append articles
				if (!fetched.length) {
					status.textContent = 'No Markdown files could be loaded. On Azure Static Web Apps, add aisummary/index.json (list of files) or ensure monthly/index.html includes article ids.';
					return;
				}
				status.remove();
				fetched.forEach((item, idx) => {
					const id = filenameBase(item.file);
					const article = createArticle({ id, title: item.title, html: item.html, collapsed: idx !== 0 });
					container.appendChild(article);
				});

				// If there's a hash, expand and scroll
				if (location.hash) {
					const el = document.getElementById(location.hash.slice(1));
					if (el) el.classList.remove('collapsed');
				}
			} catch (err) {
				console.error(err);
				status.textContent = 'Error loading summaries. Ensure directory listing is enabled for aisummary/.';
			}
		}

		// Kick off
		loadSummaries();
	</script>
</body>
</html>
